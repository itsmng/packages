name: Build and publish

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  build-deb:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt update
          sudo apt install -y build-essential dpkg-dev debhelper

      - name: Set DEB package directory
        id: debdir
        run: |
          if [[ "${GITHUB_REF_NAME}" == 1.* ]]; then
            echo "dir=deb/v1" >> $GITHUB_OUTPUT
          else
            echo "dir=deb/v2" >> $GITHUB_OUTPUT
          fi

      - name: Build DEB Package
        run: |
          cd ${{ steps.debdir.outputs.dir }}
          sed -i "s/CHANGEVERSION/${GITHUB_REF_NAME}/g" debian/rules
          dpkg-buildpackage -us -uc -b
          mv ../itsm-ng_${GITHUB_REF_NAME}_all.deb $GITHUB_WORKSPACE/
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Upload DEB artifact
        uses: actions/upload-artifact@v4
        with:
          name: itsm-ng_${{ github.ref_name }}_all.deb
          path: ${{ github.workspace }}/itsm-ng_${{ github.ref_name }}_all.deb


  build-rpm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: almalinux
            version: 9
          - os: almalinux
            version: 10
          - os: fedora
            version: 40
          - os: fedora
            version: 41
    container:
      image: ${{ matrix.os }}:${{ matrix.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Install build tools
        run: |
          dnf install -y rpm-build rpm-sign rpmdevtools dnf-plugins-core git make gcc sed gnupg

      - name: Set RPM package directory
        id: rpmdir
        run: |
          if [[ "${GITHUB_REF_NAME}" == 1.* ]]; then
            echo "dir=rpm/v1" >> $GITHUB_OUTPUT
          else
            echo "dir=rpm/v2" >> $GITHUB_OUTPUT
          fi

      - name: Import GPG key
        run: |
          echo "${{ secrets.RPM_GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --list-secret-keys

      - name: Build RPM + SRPM Packages
        run: |
          cd ${{ steps.rpmdir.outputs.dir }}
          sed -i "s/CHANGEVERSION/${GITHUB_REF_NAME}/g" SPECS/itsm-ng.spec
          rpmbuild -ba SPECS/itsm-ng.spec --define "_topdir $PWD" --undefine=_disable_source_fetch

          RPM_FILE=$(find RPMS/noarch -name "itsm-ng-*.noarch.rpm" | head -n1)
          SRPM_FILE=$(find SRPMS -name "itsm-ng-*.src.rpm" | head -n1)

          cp "$RPM_FILE"  "$GITHUB_WORKSPACE/itsm-ng-${GITHUB_REF_NAME}-${{ matrix.os }}${{ matrix.version }}.rpm"
          cp "$SRPM_FILE" "$GITHUB_WORKSPACE/itsm-ng-${GITHUB_REF_NAME}-${{ matrix.os }}${{ matrix.version }}.src.rpm"
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Sign RPMs
        run: |
          rpm --define "_gpg_name ITSM Dev team" --addsign $GITHUB_WORKSPACE/itsm-ng-${GITHUB_REF_NAME}-${{ matrix.os }}${{ matrix.version }}.rpm

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: itsm-ng-${{ github.ref_name }}-${{ matrix.os }}${{ matrix.version }}.rpm
          path: ${{ github.workspace }}/itsm-ng-${{ github.ref_name }}-${{ matrix.os }}${{ matrix.version }}.rpm

      - name: Upload SRPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: itsm-ng-${{ github.ref_name }}-${{ matrix.os }}${{ matrix.version }}.src.rpm
          path: ${{ github.workspace }}/itsm-ng-${{ github.ref_name }}-${{ matrix.os }}${{ matrix.version }}.src.rpm

  release:
    runs-on: ubuntu-latest
    needs: [build-deb, build-rpm]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist
          merge-multiple: true

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: ./dist/*
          name: ${{ github.ref_name }}
          draft: false
          generate_release_notes: false

  upload-to-server:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist
          merge-multiple: true

      - name: Upload RPMs to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          ssh-keyscan -p "$SSH_PORT" "$SSH_HOST" >> ~/.ssh/known_hosts
          rm ./dist/*.src.rpm

          for file in ./dist/*.rpm; do
            base=$(basename "$file")

            if [[ "$base" =~ almalinux([0-9]+) ]]; then
              version="${BASH_REMATCH[1]}"
              TARGET_DIR="/var/www/RPM/redhat/$version"
            elif [[ "$base" =~ fedora([0-9]+) ]]; then
              version="${BASH_REMATCH[1]}"
              TARGET_DIR="/var/www/RPM/fedora/$version"
            else
              echo "⚠️ Impossible de détecter la cible pour $base"
              continue
            fi

            echo "📦 Upload de $base vers $TARGET_DIR"
            ssh -p "$SSH_PORT" root@"$SSH_HOST" "mkdir -p $TARGET_DIR"
            scp -P "$SSH_PORT" "$file" root@"$SSH_HOST":"$TARGET_DIR/"

            echo "🔄 Mise à jour metadata dans $TARGET_DIR"
            ssh -p "$SSH_PORT" root@"$SSH_HOST" "createrepo_c --update $TARGET_DIR"
          done

  upload-deb-to-server:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist
          merge-multiple: true

      - name: Upload DEBs to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT_DEB }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          ssh-keyscan -p "$SSH_PORT" "$SSH_HOST" >> ~/.ssh/known_hosts

          # Définir les distributions en fonction de la version
          if [[ "$GITHUB_REF_NAME" == 1.* ]]; then
            DISTROS_DEBIAN="oldrelease"
            DISTROS_UBUNTU="oldrelease"
          else
            DISTROS_DEBIAN="buster bullseye bookworm trixie sid"
            DISTROS_UBUNTU="bionic focal jammy noble"
          fi

          for file in ./dist/*.deb; do
            base=$(basename "$file")
            echo "📦 Upload de $base vers le serveur"
            scp -P "$SSH_PORT" "$file" root@"$SSH_HOST":/tmp/

            # Ajout dans toutes les distributions Debian
            for dist in $DISTROS_DEBIAN; do
              echo "➕ Ajout de $base dans Debian $dist"
              ssh -p "$SSH_PORT" root@"$SSH_HOST" \
                "cd /var/www/debian && reprepro -Vb . includedeb $dist /tmp/$base"
            done

            # Ajout dans toutes les distributions Ubuntu
            for dist in $DISTROS_UBUNTU; do
              echo "➕ Ajout de $base dans Ubuntu $dist"
              ssh -p "$SSH_PORT" root@"$SSH_HOST" \
                "cd /var/www/ubuntu && reprepro -Vb . includedeb $dist /tmp/$base"
            done

            # Nettoyage
            ssh -p "$SSH_PORT" root@"$SSH_HOST" "rm -f /tmp/$base"
          done